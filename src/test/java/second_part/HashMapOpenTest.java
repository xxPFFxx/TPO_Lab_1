package second_part;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.Assert;

public class HashMapOpenTest extends Assert{
    HashMapOpen<Integer, Integer> hashMapOpen = new HashMapOpen<>();
    @Before
    public void setup(){

    }
    @After
    public void cleanUp(){
    }
    @Test
    public void testHashTable(){
        // Проверка начального состояния
        assertEquals(0, hashMapOpen.size());
        for (int i = 0; i < hashMapOpen.getBucketArray().size(); i++){
            assertNull(hashMapOpen.getBucketArray().get(i));
        }
        assertTrue(hashMapOpen.isEmpty());
        // Проверка добавления элемента
        hashMapOpen.add(5,5);
        hashMapOpen.add(10,10);
        assertFalse(hashMapOpen.isEmpty());
        assertEquals(2, hashMapOpen.size());
        for (int i = 0; i < hashMapOpen.getBucketArray().size(); i++){
            if (i != 5 && i != 10){
                assertNull(hashMapOpen.getBucketArray().get(i));
            }
            else {
                assertNull(hashMapOpen.getBucketArray().get(i).next);
                assertEquals(java.util.Optional.of(i), java.util.Optional.ofNullable(hashMapOpen.getBucketArray().get(i).value));
                assertEquals(java.util.Optional.of(i), java.util.Optional.ofNullable(hashMapOpen.getBucketArray().get(i).key));
            }
        }

        // Проверка на коллизию
        hashMapOpen.add(18,18);
        assertFalse(hashMapOpen.isEmpty());
        assertEquals(3, hashMapOpen.size());
        for (int i = 0; i < hashMapOpen.getBucketArray().size(); i++){
            if (i != 5 && i != 10){
                assertNull(hashMapOpen.getBucketArray().get(i));
            }
            else {
                if (i == 5){
                    assertNotNull(hashMapOpen.getBucketArray().get(i).next);
                    assertEquals(java.util.Optional.of(18), java.util.Optional.ofNullable(hashMapOpen.getBucketArray().get(i).value));
                    assertEquals(java.util.Optional.of(18), java.util.Optional.ofNullable(hashMapOpen.getBucketArray().get(i).key));
                    assertEquals(java.util.Optional.of(5), java.util.Optional.ofNullable(hashMapOpen.getBucketArray().get(i).next.value));
                    assertEquals(java.util.Optional.of(5), java.util.Optional.ofNullable(hashMapOpen.getBucketArray().get(i).next.key));
                    assertNull(hashMapOpen.getBucketArray().get(i).next.next);
                }
                else {
                    assertEquals(java.util.Optional.of(10), java.util.Optional.ofNullable(hashMapOpen.getBucketArray().get(i).value));
                    assertEquals(java.util.Optional.of(10), java.util.Optional.ofNullable(hashMapOpen.getBucketArray().get(i).key));
                    assertNull(hashMapOpen.getBucketArray().get(i).next);
                }
            }
        }
        // Проверка получения элемента по ключу
        assertEquals(java.util.Optional.of(5), java.util.Optional.ofNullable(hashMapOpen.get(5)));
        assertEquals(java.util.Optional.of(18), java.util.Optional.ofNullable(hashMapOpen.get(18)));
        assertEquals(java.util.Optional.of(10), java.util.Optional.ofNullable(hashMapOpen.get(10)));
        assertNull(hashMapOpen.get(1));


        // Проверка на удаление несуществующего элемента
        assertNull(hashMapOpen.remove(2));
        assertFalse(hashMapOpen.isEmpty());
        assertEquals(3, hashMapOpen.size());
        for (int i = 0; i < hashMapOpen.getBucketArray().size(); i++){
            if (i != 5 && i != 10){
                assertNull(hashMapOpen.getBucketArray().get(i));
            }
            else {
                if (i == 5){
                    assertNotNull(hashMapOpen.getBucketArray().get(i).next);
                    assertEquals(java.util.Optional.of(18), java.util.Optional.ofNullable(hashMapOpen.getBucketArray().get(i).value));
                    assertEquals(java.util.Optional.of(18), java.util.Optional.ofNullable(hashMapOpen.getBucketArray().get(i).key));
                    assertEquals(java.util.Optional.of(5), java.util.Optional.ofNullable(hashMapOpen.getBucketArray().get(i).next.value));
                    assertEquals(java.util.Optional.of(5), java.util.Optional.ofNullable(hashMapOpen.getBucketArray().get(i).next.key));
                    assertNull(hashMapOpen.getBucketArray().get(i).next.next);
                }
                else {
                    assertEquals(java.util.Optional.of(10), java.util.Optional.ofNullable(hashMapOpen.getBucketArray().get(i).value));
                    assertEquals(java.util.Optional.of(10), java.util.Optional.ofNullable(hashMapOpen.getBucketArray().get(i).key));
                    assertNull(hashMapOpen.getBucketArray().get(i).next);
                }
            }
        }

        // Проверка на удаление существующего элемента
        assertNotNull(hashMapOpen.remove(10));
        assertFalse(hashMapOpen.isEmpty());
        assertEquals(2, hashMapOpen.size());
        for (int i = 0; i < hashMapOpen.getBucketArray().size(); i++){
            if (i != 5){
                assertNull(hashMapOpen.getBucketArray().get(i));
            }
            else {
                    assertNotNull(hashMapOpen.getBucketArray().get(i).next);
                    assertEquals(java.util.Optional.of(18), java.util.Optional.ofNullable(hashMapOpen.getBucketArray().get(i).value));
                    assertEquals(java.util.Optional.of(18), java.util.Optional.ofNullable(hashMapOpen.getBucketArray().get(i).key));
                    assertEquals(java.util.Optional.of(5), java.util.Optional.ofNullable(hashMapOpen.getBucketArray().get(i).next.value));
                    assertEquals(java.util.Optional.of(5), java.util.Optional.ofNullable(hashMapOpen.getBucketArray().get(i).next.key));
                    assertNull(hashMapOpen.getBucketArray().get(i).next.next);
            }
        }

        // Проверка на удаление элемента из связного списка
        hashMapOpen.remove(18);
        assertFalse(hashMapOpen.isEmpty());
        assertEquals(1, hashMapOpen.size());
        for (int i = 0; i < hashMapOpen.getBucketArray().size(); i++){
            if (i != 5){
                assertNull(hashMapOpen.getBucketArray().get(i));
            }
            else {
                    assertEquals(java.util.Optional.of(5), java.util.Optional.ofNullable(hashMapOpen.getBucketArray().get(i).value));
                    assertEquals(java.util.Optional.of(5), java.util.Optional.ofNullable(hashMapOpen.getBucketArray().get(i).key));
                    assertNull(hashMapOpen.getBucketArray().get(i).next);
            }
        }
    }
}
